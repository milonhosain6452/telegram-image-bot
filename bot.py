# -*- coding: utf-8 -*-
import os
import io
from telegram import Update, File
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from PIL import Image, ImageFilter

# ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ ржбрж┐ржЯрзЗржЗрж▓рж╕ (ENV Variables)
# NOTE: ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп, рж╕рж╛ржзрж╛рж░ржгржд ржПржЗ key/value ржЧрзБрж▓рзЛ рж╕рж░рж╛рж╕рж░рж┐ ржХрзЛржбрзЗ рж░рж╛ржЦрж╛ ржЙржЪрж┐ржд ржирзЯред
# Render-ржПрж░ ржЬржирзНржп ржЖржкржирж┐ Environment Variables ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи,
# рждржмрзЗ ржЖржкржирж╛рж░ ржЕржирзБрж░рзЛржз ржЕржирзБржпрж╛рзЯрзА ржЖржорж┐ ржХрзЛржбрзЗржЗ ржжрж┐рзЯрзЗ ржжрж┐ржЪрзНржЫрж┐ред
API_ID = 22134923
API_HASH = "d3e9d2f01d3291e87ea65298317f86b8"
BOT_TOKEN = "8285636468:AAFPRQ1oS1N3I4MBI85RFEOZXW4pwBrWHLg"

# Gaussian Blur ржПрж░ ржЬржирзНржп ржмрзНрж▓рж╛рж░ ржПрж░ ржорж╛рждрзНрж░рж╛ (Radius)ред
# 5.0 ржПржХржЯрж┐ ржорж╛ржЭрж╛рж░рж┐ ржорж╛ржирзЗрж░ ржмрзНрж▓рж╛рж░ ржжрзЗржпрж╝, ржпрж╛ ржЖржкржирж╛рж░ ржЪрж╛рж╣рж┐ржжрж╛ (ржмрзЛржЭрж╛ ржпрж╛ржмрзЗ ржирж╛ ржЖржмрж╛рж░ ржПрждрзЛ ржХржоржУ рж╣ржмрзЗ ржирж╛) ржкрзВрж░ржгрзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНрждред
BLUR_RADIUS = 5.0 

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржмржЯ рж╢рзБрж░рзБ рж╣рж▓рзЗ /start ржХржорж╛ржирзНржбрзЗрж░ ржЙрждрзНрждрж░ ржжрзЗрзЯред"""
    await update.message.reply_text(
        "ЁЯСЛ ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ ржЖржкржирж╛рж░ ржЗржорзЗржЬ ржмрзНрж▓рж╛рж░ ржмржЯред ржЖржорж╛ржХрзЗ ржПржХржЯрж┐ ржЫржмрж┐ ржкрж╛ржарж╛ржи, ржЖржорж┐ ржПржЯрж┐ржХрзЗ рж╣рж╛рж▓ржХрж╛ ржмрзНрж▓рж╛рж░ ржХрж░рзЗ ржлрзЗрж░ржд ржжрзЗржмрзЛред\n"
        "ржЖржорж╛рж░ ржмрзНрж▓рж╛рж░ ржПрж░ ржорж╛рждрзНрж░рж╛: {BLUR_RADIUS}"
    )

async def blur_image(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржЗржЙржЬрж╛рж░рзЗрж░ ржкрж╛ржарж╛ржирзЛ ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рзЗ, ржмрзНрж▓рж╛рж░ ржХрж░рзЗ ржПржмржВ ржмрзНрж▓рж╛рж░ ржХрж░рж╛ ржЫржмрж┐ ржлрзЗрж░ржд ржкрж╛ржарж╛рзЯред"""
    chat_id = update.message.chat_id
    
    # 1. ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛
    try:
        # ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржерзЗржХрзЗ ржЫржмрж┐рж░ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЬ рж╕рж╛ржЗржЬрзЗрж░ ржлрж╛ржЗрж▓ржЯрж┐ ржирзЗржУрзЯрж╛
        photo_file_id = update.message.photo[-1].file_id
        new_file: File = await context.bot.get_file(photo_file_id)
        
        # ржлрж╛ржЗрж▓ржЯрж┐ржХрзЗ ржорзЗржорж░рж┐рждрзЗ ржбрж╛ржЙржирж▓рзЛржб ржХрж░рж╛ 
        # (Render-ржП ржлрж╛ржЗрж▓ рж╕рж┐рж╕рзНржЯрзЗржорзЗ рж╕рзЗржн ржирж╛ ржХрж░рзЗ ржорзЗржорж░рж┐рждрзЗ ржХрж╛ржЬ ржХрж░рж╛ ржнрж╛рж▓рзЛ)
        image_data = await new_file.download_as_bytes()
        
    except Exception as e:
        await update.message.reply_text("ржЫржмрж┐ ржбрж╛ржЙржирж▓рзЛржбрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред")
        print(f"Error downloading image: {e}")
        return

    await update.message.reply_text("ржЫржмрж┐ржЯрж┐ ржкрзЗрзЯрзЗржЫрж┐ред ржмрзНрж▓рж╛рж░ ржХрж░ржЫрж┐... тП│")

    # 2. ржЫржмрж┐ ржПржбрж┐ржЯ ржХрж░рзЗ ржмрзНрж▓рж╛рж░ ржХрж░рж╛
    try:
        # ржмрж╛ржЗржЯ ржбрзЗржЯрж╛ ржерзЗржХрзЗ PIL ржЗржорзЗржЬ ржЕржмржЬрзЗржХрзНржЯ рждрзИрж░рж┐ ржХрж░рж╛
        original_image = Image.open(io.BytesIO(image_data))
        
        # Gaussian Blur ржкрзНрж░рзЯрзЛржЧ ржХрж░рж╛ 
        # GaussianBlur рж╕рж╛ржзрж╛рж░ржгржд ржнрж╛рж▓рзЛ, ржкрзНрж░рж╛ржХрзГрждрж┐ржХ ржмрзНрж▓рж╛рж░ ржПржлрзЗржХрзНржЯ ржжрзЗрзЯред
        blurred_image = original_image.filter(ImageFilter.GaussianBlur(radius=BLUR_RADIUS))

        # ржмрзНрж▓рж╛рж░ ржХрж░рж╛ ржЫржмрж┐ржЯрж┐ рж╕рзЗржн ржХрж░рж╛рж░ ржЬржирзНржп ржПржХржЯрж┐ ржорзЗржорж░рж┐ ржмрж╛ржлрж╛рж░ рждрзИрж░рж┐ ржХрж░рж╛
        buffered_output = io.BytesIO()
        # ржЫржмрж┐рж░ ржЖрж╕рж▓ ржлрж░ржорзНржпрж╛ржЯ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрждрзЗ original_image.format ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржЙржЪрж┐ржд, рждржмрзЗ 
        # JPEG ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛ ржпрж╛рждрзЗ рж╕ржм ржарж┐ржХ ржерж╛ржХрзЗред PNG/GIF-ржПрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗржУ рж╕рзЗржн ржХрж░рж╛ ржпрзЗрждрзЗ ржкрж╛рж░рзЗред
        if original_image.mode in ('RGBA', 'P'):
            # ржЯрзНрж░рж╛ржирзНрж╕ржкрж╛рж░рзЗржирзНрж╕рж┐ ржерж╛ржХрж▓рзЗ PNG ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
            blurred_image.save(buffered_output, format="PNG")
        else:
            blurred_image.save(buffered_output, format="JPEG")
            
        buffered_output.seek(0)
        
    except Exception as e:
        await update.message.reply_text("ржЫржмрж┐ ржмрзНрж▓рж╛рж░ ржХрж░рж╛рж░ рж╕ржорзЯ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред тЭМ")
        print(f"Error processing image: {e}")
        return
        
    # 3. ржмрзНрж▓рж╛рж░ ржХрж░рж╛ ржЫржмрж┐ ржлрзЗрж░ржд ржкрж╛ржарж╛ржирзЛ
    try:
        await context.bot.send_photo(
            chat_id=chat_id,
            photo=buffered_output,
            caption=f"ржЫржмрж┐ржЯрж┐ рж╕ржлрж▓ржнрж╛ржмрзЗ ржмрзНрж▓рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ (Radius: {BLUR_RADIUS})ред тЬЕ"
        )
    except Exception as e:
        await update.message.reply_text("ржмрзНрж▓рж╛рж░ ржХрж░рж╛ ржЫржмрж┐ ржкрж╛ржарж╛рждрзЗ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        print(f"Error sending blurred image: {e}")


def main() -> None:
    """ржмржЯ рж╢рзБрж░рзБ ржХрж░рзЗред"""
    # Application рждрзИрж░рж┐ ржХрж░рж╛
    application = Application.builder().token(BOT_TOKEN).build()

    # ржХржорж╛ржирзНржб ржПржмржВ ржорзЗрж╕рзЗржЬ рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░ ржпрзЛржЧ ржХрж░рж╛
    application.add_handler(CommandHandler("start", start_command))
    # 'photo' ржХржирзНржЯрзЗржирзНржЯ ржЯрж╛ржЗржкрзЗрж░ ржорзЗрж╕рзЗржЬржЧрзБрж▓рзЛрж░ ржЬржирзНржп рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░
    application.add_handler(MessageHandler(filters.PHOTO, blur_image))

    # ржмржЯржХрзЗ ржЪрж╛рж▓рзБ рж░рж╛ржЦрж╛ 
    # Render-ржП Webhook ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╕ржмржЪрзЗрзЯрзЗ ржнрж╛рж▓рзЛ, ржХрж┐ржирзНрждрзБ рж╕рж╣ржЬрждржо ржЙржкрж╛рзЯрзЗрж░ ржЬржирзНржп Polling ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣рж▓рзЛред
    # ржЖржкржирж┐ Webhook-ржПрж░ ржЬржирзНржп ржХрзЛржбржЯрж┐ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржпржжрж┐ ржЖржкржирж╛рж░ ржкрзНрж░рзЯрзЛржЬржи рж╣рзЯред
    print("ржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ... Polling рж╢рзБрж░рзБ рж╣рж▓рзЛред")
    application.run_polling(poll_interval=3)

if __name__ == "__main__":
    # CommandHandler-ржХрзЗ main-ржПрж░ ржмрж╛ржЗрж░рзЗ ржбрж┐ржлрж╛ржЗржи ржХрж░рж╛ рж╣рзЯ, рждрж╛ржЗ ржПржЯрж┐ржХрзЗ ржПржЦрж╛ржирзЗ ржЗржорзНржкрзЛрж░рзНржЯ ржХрж░рждрзЗ рж╣ржмрзЗред
    from telegram.ext import CommandHandler
    main()
