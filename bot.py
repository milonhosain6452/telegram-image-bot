import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from PIL import Image, ImageFilter
import io

# Environment variables - ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶ö‡ßç‡¶õ‡¶ø
API_ID = 22134923
API_HASH = "d3e9d2f01d3291e87ea65298317f86b8"
BOT_TOKEN = "8285636468:AAFPRQ1oS1N3I4MBI85RFEOZXW4pwBrWHLg"

# ‡¶≤‡¶ó‡¶ø‡¶Ç ‡¶∏‡ßá‡¶ü‡¶Ü‡¶™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> None:
    """‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°"""
    await update.message.reply_text(
        "‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶Æ‡ßá‡¶ú ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞‡¶ø‡¶Ç ‡¶¨‡¶ü‡•§\n\n"
        "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶ø‡¶ï‡ßá ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶¨‡•§"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    """‡¶π‡ßá‡¶≤‡ßç‡¶™ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°"""
    await update.message.reply_text(
        "‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ:\n"
        "1. ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®\n"
        "2. ‡¶Ü‡¶Æ‡¶ø ‡¶õ‡¶¨‡¶ø‡¶ü‡¶ø ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶´‡ßá‡¶∞‡¶§ ‡¶¶‡ßá‡¶¨\n"
        "3. ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶è‡¶Æ‡¶® ‡¶π‡¶¨‡ßá ‡¶®‡¶æ ‡¶Ø‡ßá ‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶¨‡¶æ ‡¶ñ‡ßÅ‡¶¨ ‡¶ï‡¶Æ"
    )

def apply_blur(image_data):
    """‡¶á‡¶Æ‡ßá‡¶ú‡ßá ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶á‡¶´‡ßá‡¶ï‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó ‡¶ï‡¶∞‡ßá"""
    try:
        # ‡¶á‡¶Æ‡ßá‡¶ú ‡¶ñ‡ßã‡¶≤‡¶æ
        image = Image.open(io.BytesIO(image_data))
        
        # ‡¶á‡¶Æ‡ßá‡¶ú‡¶ï‡ßá RGB ‡¶è ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶Ø‡¶¶‡¶ø PNG ‡¶¨‡¶æ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡¶Ø‡¶º)
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # ‡¶Æ‡¶æ‡¶ù‡¶æ‡¶∞‡¶ø ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡ßá ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó (‡¶∞‡ßá‡¶°‡¶ø‡¶Ø‡¶º‡¶æ‡¶∏ 5-8 ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá)
        blurred_image = image.filter(ImageFilter.GaussianBlur(radius=6))
        
        # ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶Æ‡ßá‡¶ú‡¶ï‡ßá ‡¶¨‡¶æ‡¶á‡¶ü‡ßá ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ
        output_buffer = io.BytesIO()
        blurred_image.save(output_buffer, format='JPEG', quality=85)
        output_buffer.seek(0)
        
        return output_buffer.getvalue()
    
    except Exception as e:
        logger.error(f"‡¶á‡¶Æ‡ßá‡¶ú ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞‡¶∞: {e}")
        raise

async def handle_photo(update: Update, context: CallbackContext) -> None:
    """‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    try:
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶Ø‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶õ‡ßá
        processing_message = await update.message.reply_text("‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        
        # ‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶∞‡ßá‡¶ú‡ßã‡¶≤‡¶ø‡¶â‡¶∂‡¶®‡ßá‡¶∞ ‡¶õ‡¶¨‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
        photo_file = await update.message.photo[-1].get_file()
        photo_data = await photo_file.download_as_bytearray()
        
        # ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó
        blurred_photo = apply_blur(photo_data)
        
        # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        await processing_message.delete()
        
        # ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        await update.message.reply_photo(
            photo=io.BytesIO(blurred_photo),
            caption="‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø üì∏"
        )
        
        logger.info(f"‡¶õ‡¶¨‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá user_id: {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def handle_document(update: Update, context: CallbackContext) -> None:
    """‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶õ‡¶¨‡¶ø ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤ ‡¶ï‡¶∞‡¶æ"""
    try:
        document = update.message.document
        
        # ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßá‡¶®‡¶∂‡¶® ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
        allowed_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.gif']
        file_extension = os.path.splitext(document.file_name or '')[-1].lower()
        
        if file_extension not in allowed_extensions:
            await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡ßá‡¶° (JPG, PNG, BMP, GIF)")
            return
        
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú ‡¶ö‡ßá‡¶ï (10MB ‡¶è‡¶∞ ‡¶ï‡¶Æ)
        if document.file_size > 10 * 1024 * 1024:
            await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú 10MB ‡¶è‡¶∞ ‡¶ï‡¶Æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá")
            return
        
        # ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶æ‡¶®‡ßã ‡¶Ø‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ö‡¶≤‡¶õ‡ßá
        processing_message = await update.message.reply_text("‡¶õ‡¶¨‡¶ø ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        
        # ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
        document_file = await document.get_file()
        document_data = await document_file.download_as_bytearray()
        
        # ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó
        blurred_image = apply_blur(document_data)
        
        # ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
        await processing_message.delete()
        
        # ‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        await update.message.reply_document(
            document=io.BytesIO(blurred_image),
            filename=f"blurred_image{file_extension}",
            caption="‡¶¨‡ßç‡¶≤‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶õ‡¶¨‡¶ø üì∏"
        )
        
        logger.info(f"‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶á‡¶Æ‡ßá‡¶ú ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá user_id: {update.effective_user.id}")
        
    except Exception as e:
        logger.error(f"‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

async def error_handler(update: Update, context: CallbackContext) -> None:
    """‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞"""
    logger.error(f"‡¶Ü‡¶™‡¶°‡ßá‡¶ü {update} ‡¶è‡¶∞ ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶è‡¶∞‡¶∞: {context.error}")

def main() -> None:
    """‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ"""
    try:
        # ‡¶¨‡¶ü ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶§‡ßà‡¶∞‡¶ø
        application = Application.builder().token(BOT_TOKEN).build()
        
        # ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # ‡¶´‡¶ü‡ßã ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        
        # ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞ (‡¶á‡¶Æ‡ßá‡¶ú ‡¶´‡¶æ‡¶á‡¶≤)
        application.add_handler(MessageHandler(
            filters.Document.IMAGE | 
            filters.Document.MIME_TYPE("image/jpeg") |
            filters.Document.MIME_TYPE("image/png") |
            filters.Document.MIME_TYPE("image/bmp") |
            filters.Document.MIME_TYPE("image/gif"),
            handle_document
        ))
        
        # ‡¶è‡¶∞‡¶∞ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞
        application.add_error_handler(error_handler)
        
        # ‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶æ
        print("‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"‡¶¨‡¶ü ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")

if __name__ == '__main__':
    main()
